/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntityInfo,
    EntityInfoFromJSON,
    EntityInfoFromJSONTyped,
    EntityInfoToJSON,
} from './';

/**
 * A consensus block.
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * The block height.
     * @type {number}
     * @memberof Block
     */
    height: number;
    /**
     * The block header hash.
     * @type {string}
     * @memberof Block
     */
    hash: string;
    /**
     * The second-granular consensus time.
     * @type {Date}
     * @memberof Block
     */
    timestamp: Date;
    /**
     * Number of transactions in the block.
     * @type {number}
     * @memberof Block
     */
    num_transactions: number;
    /**
     * The gas limit for the block. A gas limit 0 means that the max block gas was unlimited.
     * Blocks from Cobalt, Damask, and early Eden had no gas limit as their sizes were only
     * restricted by byte size until an upgrade during Eden introduced a gas limit.
     * @type {string}
     * @memberof Block
     */
    gas_limit: string;
    /**
     * The size limit for the block in bytes.
     * @type {string}
     * @memberof Block
     */
    size_limit?: string;
    /**
     * The epoch number of the epoch in which the block was produced.
     * @type {number}
     * @memberof Block
     */
    epoch: number;
    /**
     * The Merkle root of the state tree after applying the block.
     * @type {string}
     * @memberof Block
     */
    state_root: string;
    /**
     * The entity that proposed this block.
     * @type {EntityInfo}
     * @memberof Block
     */
    proposer: EntityInfo;
    /**
     * A list of the entities that signed the block.
     * @type {Array<EntityInfo>}
     * @memberof Block
     */
    signers?: Array<EntityInfo>;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'height': json['height'],
        'hash': json['hash'],
        'timestamp': (new Date(json['timestamp'])),
        'num_transactions': json['num_transactions'],
        'gas_limit': json['gas_limit'],
        'size_limit': !exists(json, 'size_limit') ? undefined : json['size_limit'],
        'epoch': json['epoch'],
        'state_root': json['state_root'],
        'proposer': EntityInfoFromJSON(json['proposer']),
        'signers': !exists(json, 'signers') ? undefined : ((json['signers'] as Array<any>).map(EntityInfoFromJSON)),
    };
}

export function BlockToJSON(value?: Block | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'height': value.height,
        'hash': value.hash,
        'timestamp': (value.timestamp.toISOString()),
        'num_transactions': value.num_transactions,
        'gas_limit': value.gas_limit,
        'size_limit': value.size_limit,
        'epoch': value.epoch,
        'state_root': value.state_root,
        'proposer': EntityInfoToJSON(value.proposer),
        'signers': value.signers === undefined ? undefined : ((value.signers as Array<any>).map(EntityInfoToJSON)),
    };
}


