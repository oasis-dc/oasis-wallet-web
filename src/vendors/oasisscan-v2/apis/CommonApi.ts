/* tslint:disable */
/* eslint-disable */
/**
 * 
 * This api document example is the Mainnet document, and the Testnet base URL is api.oasisscan.com/v2/testnet
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NetworkStatusResponse,
    NetworkStatusResponseFromJSON,
    NetworkStatusResponseToJSON,
    NetworkTrendResponse,
    NetworkTrendResponseFromJSON,
    NetworkTrendResponseToJSON,
} from '../models';

/**
 * 
 */
export class CommonApi extends runtime.BaseAPI {

    /**
     */
    async healthHandlerRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async healthHandler(): Promise<object> {
        const response = await this.healthHandlerRaw();
        return await response.value();
    }

    /**
     */
    async networkStatusHandlerRaw(): Promise<runtime.ApiResponse<NetworkStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/network/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async networkStatusHandler(): Promise<NetworkStatusResponse> {
        const response = await this.networkStatusHandlerRaw();
        return await response.value();
    }

    /**
     */
    async networkTrendHandlerRaw(): Promise<runtime.ApiResponse<NetworkTrendResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/trend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkTrendResponseFromJSON(jsonValue));
    }

    /**
     */
    async networkTrendHandler(): Promise<NetworkTrendResponse> {
        const response = await this.networkTrendHandlerRaw();
        return await response.value();
    }

}
