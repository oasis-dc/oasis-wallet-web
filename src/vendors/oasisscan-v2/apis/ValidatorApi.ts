/* tslint:disable */
/* eslint-disable */
/**
 * 
 * This api document example is the Mainnet document, and the Testnet base URL is api.oasisscan.com/v2/testnet
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DelegatorsResponse,
    DelegatorsResponseFromJSON,
    DelegatorsResponseToJSON,
    ValidatorBlocksStatsResponse,
    ValidatorBlocksStatsResponseFromJSON,
    ValidatorBlocksStatsResponseToJSON,
    ValidatorEscrowEventResponse,
    ValidatorEscrowEventResponseFromJSON,
    ValidatorEscrowEventResponseToJSON,
    ValidatorEscrowStatsResponse,
    ValidatorEscrowStatsResponseFromJSON,
    ValidatorEscrowStatsResponseToJSON,
    ValidatorInfoResponse,
    ValidatorInfoResponseFromJSON,
    ValidatorInfoResponseToJSON,
    ValidatorListResponse,
    ValidatorListResponseFromJSON,
    ValidatorListResponseToJSON,
    ValidatorSignStatsResponse,
    ValidatorSignStatsResponseFromJSON,
    ValidatorSignStatsResponseToJSON,
} from '../models';

export interface DelegatorsHandlerRequest {
    address: string;
    page: number;
    size: number;
}

export interface ValidatorBlocksStatsHandlerRequest {
    address: string;
}

export interface ValidatorEscrowEventHandlerRequest {
    address: string;
    page: number;
    size: number;
}

export interface ValidatorEscrowStatsHandlerRequest {
    address: string;
}

export interface ValidatorInfoHandlerRequest {
    address: string;
}

export interface ValidatorListHandlerRequest {
    orderBy: string;
    sort: string;
}

export interface ValidatorSignStatsHandlerRequest {
    address: string;
}

/**
 * 
 */
export class ValidatorApi extends runtime.BaseAPI {

    /**
     */
    async delegatorsHandlerRaw(requestParameters: DelegatorsHandlerRequest): Promise<runtime.ApiResponse<DelegatorsResponse>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling delegatorsHandler.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling delegatorsHandler.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling delegatorsHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/delegators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegatorsResponseFromJSON(jsonValue));
    }

    /**
     */
    async delegatorsHandler(requestParameters: DelegatorsHandlerRequest): Promise<DelegatorsResponse> {
        const response = await this.delegatorsHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatorBlocksStatsHandlerRaw(requestParameters: ValidatorBlocksStatsHandlerRequest): Promise<runtime.ApiResponse<ValidatorBlocksStatsResponse>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling validatorBlocksStatsHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/blocksstats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorBlocksStatsResponseFromJSON(jsonValue));
    }

    /**
     */
    async validatorBlocksStatsHandler(requestParameters: ValidatorBlocksStatsHandlerRequest): Promise<ValidatorBlocksStatsResponse> {
        const response = await this.validatorBlocksStatsHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatorEscrowEventHandlerRaw(requestParameters: ValidatorEscrowEventHandlerRequest): Promise<runtime.ApiResponse<ValidatorEscrowEventResponse>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling validatorEscrowEventHandler.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling validatorEscrowEventHandler.');
        }

        if (requestParameters.size === null || requestParameters.size === undefined) {
            throw new runtime.RequiredError('size','Required parameter requestParameters.size was null or undefined when calling validatorEscrowEventHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/escrowevent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorEscrowEventResponseFromJSON(jsonValue));
    }

    /**
     */
    async validatorEscrowEventHandler(requestParameters: ValidatorEscrowEventHandlerRequest): Promise<ValidatorEscrowEventResponse> {
        const response = await this.validatorEscrowEventHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatorEscrowStatsHandlerRaw(requestParameters: ValidatorEscrowStatsHandlerRequest): Promise<runtime.ApiResponse<ValidatorEscrowStatsResponse>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling validatorEscrowStatsHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/escrowstats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorEscrowStatsResponseFromJSON(jsonValue));
    }

    /**
     */
    async validatorEscrowStatsHandler(requestParameters: ValidatorEscrowStatsHandlerRequest): Promise<ValidatorEscrowStatsResponse> {
        const response = await this.validatorEscrowStatsHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatorInfoHandlerRaw(requestParameters: ValidatorInfoHandlerRequest): Promise<runtime.ApiResponse<ValidatorInfoResponse>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling validatorInfoHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async validatorInfoHandler(requestParameters: ValidatorInfoHandlerRequest): Promise<ValidatorInfoResponse> {
        const response = await this.validatorInfoHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatorListHandlerRaw(requestParameters: ValidatorListHandlerRequest): Promise<runtime.ApiResponse<ValidatorListResponse>> {
        if (requestParameters.orderBy === null || requestParameters.orderBy === undefined) {
            throw new runtime.RequiredError('orderBy','Required parameter requestParameters.orderBy was null or undefined when calling validatorListHandler.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling validatorListHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorListResponseFromJSON(jsonValue.data));
    }

    /**
     */
    async validatorListHandler(requestParameters: ValidatorListHandlerRequest): Promise<ValidatorListResponse> {
        const response = await this.validatorListHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatorSignStatsHandlerRaw(requestParameters: ValidatorSignStatsHandlerRequest): Promise<runtime.ApiResponse<ValidatorSignStatsResponse>> {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling validatorSignStatsHandler.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validator/signstats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorSignStatsResponseFromJSON(jsonValue));
    }

    /**
     */
    async validatorSignStatsHandler(requestParameters: ValidatorSignStatsHandlerRequest): Promise<ValidatorSignStatsResponse> {
        const response = await this.validatorSignStatsHandlerRaw(requestParameters);
        return await response.value();
    }

}
